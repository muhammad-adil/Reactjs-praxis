
npm init
npm install react react-dom --save
npm install webpack webpack-dev-server babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-2 --save
npm install babel-core
npm install prop-types
//as proptypes wll not be supported anymore in future versions


//For OSX/MAC
  // "scripts": {
  //   "start": "npm run build",
  //   "build":
  //     "webpack -d && xcopy \"src/index.html\" \"dist/\" /F /Y && webpack-dev-server --content-base src/ --inline --watch",
  //   "build:prod": "webpack -p && xcopy \"src/index.html\" \"dist/\" /F /Y "
  // },

//Windows

"scripts": {
  "start": "npm run build",
  "build": "webpack -d && xcopy \"src/index.html\" \"dist/\" /F /Y && webpack-dev-server --content-base src/ --inline",
  "build:prod": "webpack -p && xcopy \"src/index.html\" \"dist/\" /F /Y"
},ï»¿


npm start

learn ={
  props: props are just like attribute in html
  events:
  state: is a reference intation of all of your component's data, one big object that holds all the information thats related your component, its a master copy of all of your data
};


#### lifecycles Hooks

1. componentWillMount       immediately before initial rendering
2. componentDidMount        immediately after initial rendering
3. componentwillRecieveProps  When component recieves new props 
4. shouldComponentUpdate    before rendering, afer receiving new props or state
5. componentWillUpdate      before rendering, after receiving new props or state
6. componentDidUpdate     after component's updates are flushed to DOM
7. componentWillUnmount     immediately before removing component from DOM




-. componentWillReceiveProps(object nextProps)
-. boolean shouldComponentUpdate(object nextProps, object nextState)
-. componentWillUpdate(object nextProps, object nextState)
-. componentDidUpdate(object prevProps, object prevState)
-. componentWillUnmount()
-. React.unmountComponentAtNode(document.body)


var timeStamp = (new Date()).getTime();


treating object keys

{Object.keys(this.state.abc).map(this.renderabc)}

renderabc(){}

renderabc: function (key){
  return <abc key={key} index={key} details={this.state.abc[key]}
}



Routing

https://css-tricks.com/learning-react-router/
https://css-tricks.com/react-router-4/



npm install --save react-router-dom

<BrowserRouter>: Keeps UI in sync with the browser history.
<Link>: Provides declarative navigation around the application.
<Match>: Renders UI when the pattern matches the location.

